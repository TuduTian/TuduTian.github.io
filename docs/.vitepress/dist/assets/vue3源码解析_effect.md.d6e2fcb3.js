import{_ as s,c as a,o as n,a as l}from"./app.195d37f4.js";const i=JSON.parse('{"title":"effect思路","description":"","frontmatter":{},"headers":[{"level":2,"title":"依赖收集","slug":"依赖收集","link":"#依赖收集","children":[{"level":3,"title":"强引用和弱引用的区别 （Map和Weakmap的比较）","slug":"强引用和弱引用的区别-map和weakmap的比较","link":"#强引用和弱引用的区别-map和weakmap的比较","children":[]},{"level":3,"title":"weakMap 的介绍","slug":"weakmap-的介绍","link":"#weakmap-的介绍","children":[]},{"level":3,"title":"依赖收集 => 数据结构的介绍","slug":"依赖收集-数据结构的介绍","link":"#依赖收集-数据结构的介绍","children":[]},{"level":3,"title":"依赖收集问题之 effect 中再次调用 effect 使用栈结构规避多次嵌套的问题，能准确拿到最外层的 effect 函数","slug":"依赖收集问题之-effect-中再次调用-effect-使用栈结构规避多次嵌套的问题-能准确拿到最外层的-effect-函数","link":"#依赖收集问题之-effect-中再次调用-effect-使用栈结构规避多次嵌套的问题-能准确拿到最外层的-effect-函数","children":[]}]}],"relativePath":"vue3源码解析/effect.md"}'),p={name:"vue3源码解析/effect.md"},o=l(`<h1 id="effect思路" tabindex="-1">effect思路 <a class="header-anchor" href="#effect思路" aria-hidden="true">#</a></h1><blockquote><p>每次在调用effect函数的时候需要传进去两个参数，第一个参数为一个回调函数，也就是执行的函数，第二个参数是一个options，options可以选填一个lazy属性，默认为false，回调函数会立即执行，如果修改成false的话是不会立即执行的</p></blockquote><h2 id="依赖收集" tabindex="-1">依赖收集 <a class="header-anchor" href="#依赖收集" aria-hidden="true">#</a></h2><blockquote><p>我们通过reactive加工出来的数据是进行代理过的，每次访问和修改都会走对应的get函数以及set函数,在effect函数中使用响应式数据的时候他会进行一个依赖收集，以免以后数据更新时重新调用函数</p></blockquote><h3 id="强引用和弱引用的区别-map和weakmap的比较" tabindex="-1">强引用和弱引用的区别 （Map和Weakmap的比较） <a class="header-anchor" href="#强引用和弱引用的区别-map和weakmap的比较" aria-hidden="true">#</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/* 使用map构建出来的容器是强引用的，如果你放进去的对象已经赋值为null了，但是内存中的这个对象的引用地址是不会消失的，因为还有map里面在引用他 */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">={</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">tom</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> map </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Map</span><span style="color:#A6ACCD;"> ()</span></span>
<span class="line"><span style="color:#A6ACCD;">    map</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">any value</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    obj </span><span style="color:#89DDFF;">=null</span></span>
<span class="line"><span style="color:#A6ACCD;">    map</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">size</span><span style="color:#A6ACCD;"> ()  </span><span style="color:#676E95;">// 1 </span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">/* 使用 WeakMap 构建出来的容器时弱引用的，放进去的对象已经赋值为null了，内存中就会被垃圾回收机制进行清理 */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">={</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">tom</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> map </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">WeakMap</span><span style="color:#A6ACCD;"> ()</span></span>
<span class="line"><span style="color:#A6ACCD;">    map</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">any value</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    obj </span><span style="color:#89DDFF;">=null</span></span>
<span class="line"><span style="color:#A6ACCD;">     map</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">size</span><span style="color:#A6ACCD;"> ()  </span><span style="color:#676E95;">// 0 </span></span>
<span class="line"></span></code></pre></div><h3 id="weakmap-的介绍" tabindex="-1">weakMap 的介绍 <a class="header-anchor" href="#weakmap-的介绍" aria-hidden="true">#</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> weakMap </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">WeakMap</span><span style="color:#A6ACCD;">()  </span><span style="color:#676E95;">// 创建一个容器，里面的key只能是对象，并且他有助于垃圾回收 </span></span>
<span class="line"></span></code></pre></div><h3 id="依赖收集-数据结构的介绍" tabindex="-1">依赖收集 =&gt; 数据结构的介绍 <a class="header-anchor" href="#依赖收集-数据结构的介绍" aria-hidden="true">#</a></h3><ol><li>为了保证是弱引用，采用 WeakMap 进行保存</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Track </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">WeakMap</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><ol start="2"><li>我们传进去的刚好是一个对象</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">tom</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><ol start="3"><li>Track的key和value</li></ol><blockquote><p>track中存放的key是用户传进去的对象,value则是应该收集对象中的哪一个属性 例子：</p></blockquote><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">reactive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">tom</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">effect</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> ) </span><span style="color:#676E95;">// 应该收集 name属性并且name改变时调用此函数</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    Track </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">{</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">tom</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Map</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;">Set</span><span style="color:#A6ACCD;">(fn</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">fn</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">fn</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">fn)</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)}</span></span>
<span class="line"></span></code></pre></div><ol start="4"><li>3中最后一个就是最好我们想要的结果，他如果多个effect函数收集的话，我们可以进行判断并且push进去</li></ol><h3 id="依赖收集问题之-effect-中再次调用-effect-使用栈结构规避多次嵌套的问题-能准确拿到最外层的-effect-函数" tabindex="-1">依赖收集问题之 effect 中再次调用 effect 使用栈结构规避多次嵌套的问题，能准确拿到最外层的 effect 函数 <a class="header-anchor" href="#依赖收集问题之-effect-中再次调用-effect-使用栈结构规避多次嵌套的问题-能准确拿到最外层的-effect-函数" aria-hidden="true">#</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> reactive</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> effect </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VueReactive</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">张三</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">list</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">200</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">effect</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">effect</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">list</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">list</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">a</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">effect</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 收集到的</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/*  </span></span>
<span class="line"><span style="color:#676E95;">   () =&gt; {</span></span>
<span class="line"><span style="color:#676E95;">    state.name</span></span>
<span class="line"><span style="color:#676E95;">        effect(() =&gt; {</span></span>
<span class="line"><span style="color:#676E95;">        state.list</span></span>
<span class="line"><span style="color:#676E95;">        })</span></span>
<span class="line"><span style="color:#676E95;">        state.list.a</span></span>
<span class="line"><span style="color:#676E95;">} &#39;@@@@@@@@@@@&#39;</span></span>
<span class="line"><span style="color:#676E95;">() =&gt; {</span></span>
<span class="line"><span style="color:#676E95;">                        state.list</span></span>
<span class="line"><span style="color:#676E95;">                    } &#39;@@@@@@@@@@@&#39;</span></span>
<span class="line"><span style="color:#676E95;">      () =&gt; {</span></span>
<span class="line"><span style="color:#676E95;">                    state.name</span></span>
<span class="line"><span style="color:#676E95;">                } &#39;@@@@@@@@@@@&#39;</span></span>
<span class="line"><span style="color:#676E95;">                </span></span>
<span class="line"><span style="color:#676E95;">     */</span></span>
<span class="line"></span></code></pre></div>`,19),e=[o];function t(c,r,y,D,A,F){return n(),a("div",null,e)}const f=s(p,[["render",t]]);export{i as __pageData,f as default};
