import{_ as s,c as l,o as a,a as n}from"./app.195d37f4.js";const d=JSON.parse(`{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"vite剖析","slug":"vite剖析","link":"#vite剖析","children":[{"level":3,"title":"说明","slug":"说明","link":"#说明","children":[]},{"level":3,"title":"准备","slug":"准备","link":"#准备","children":[]},{"level":3,"title":"处理 '/' 路径","slug":"处理-路径","link":"#处理-路径","children":[]},{"level":3,"title":"处理js文件","slug":"处理js文件","link":"#处理js文件","children":[]},{"level":3,"title":"处理 第三方模块 也就是 import {ref} from 'vue'  | import React from 'react' 的情况","slug":"处理-第三方模块-也就是-import-ref-from-vue-import-react-from-react-的情况","link":"#处理-第三方模块-也就是-import-ref-from-vue-import-react-from-react-的情况","children":[]},{"level":3,"title":"处理sfc 单文件组件","slug":"处理sfc-单文件组件","link":"#处理sfc-单文件组件","children":[]},{"level":3,"title":"处理css文件‘","slug":"处理css文件","link":"#处理css文件","children":[]}]}],"relativePath":"vite.md"}`),p={name:"vite.md"},o=n(`<h2 id="vite剖析" tabindex="-1">vite剖析 <a class="header-anchor" href="#vite剖析" aria-hidden="true">#</a></h2><p>github链接:<a href="https://github.com/TuduTian/vite-demo" target="_blank" rel="noreferrer">https://github.com/TuduTian/vite-demo</a></p><h3 id="说明" tabindex="-1">说明 <a class="header-anchor" href="#说明" aria-hidden="true">#</a></h3><blockquote><p>vite 采用的是浏览器的es模块进行加载，在开发时加载速度很快</p></blockquote><h3 id="准备" tabindex="-1">准备 <a class="header-anchor" href="#准备" aria-hidden="true">#</a></h3><ol><li>express 服务器 用来处理浏览器的请求</li><li>path 和 fs 内置模块</li><li>vue编译库 compiler-sfc 的使用</li></ol><h3 id="处理-路径" tabindex="-1">处理 &#39;/&#39; 路径 <a class="header-anchor" href="#处理-路径" aria-hidden="true">#</a></h3><ol><li>通过fs读取到index.html 返回就可以了</li><li>记住html中的script的type为module</li><li>如果设置了module浏览器会自动的进行重新发送请求进行加载当前这个路径</li></ol><h3 id="处理js文件" tabindex="-1">处理js文件 <a class="header-anchor" href="#处理js文件" aria-hidden="true">#</a></h3><ol><li>判断是否为.js 结尾 一个方法 &#39;&#39;.endsWith() // 如果是末尾就返回true 不然返回falsae</li><li>通过fs进行加载 并且设置相应类型响应出去</li><li>在响应出去钱要对里面的字符串进行重写，替换 import {ref} from &#39;vue&#39; 类的路径 因为vue不能被浏览器正常解析</li><li>vite源码替换的是/@modules/xxx <strong>路径重写的这个方法是发送文件都会使用的，最好是封一下</strong></li></ol><h3 id="处理-第三方模块-也就是-import-ref-from-vue-import-react-from-react-的情况" tabindex="-1">处理 第三方模块 也就是 import {ref} from &#39;vue&#39; | import React from &#39;react&#39; 的情况 <a class="header-anchor" href="#处理-第三方模块-也就是-import-ref-from-vue-import-react-from-react-的情况" aria-hidden="true">#</a></h3><ol><li>分割url 因为此时的url在重写的时候已经假如了/@modules 这个前缀了，因为只要判断是否是这个前缀就可以了</li><li>我们要拿到node_modules中xx库的pack.json文件 中的module字段，它保存着esmodules的入口文件</li><li>然后通过require的方式读取 pack.json中的module字段</li><li>fs读取文件并且<strong>重写</strong>后返回4</li></ol><h3 id="处理sfc-单文件组件" tabindex="-1">处理sfc 单文件组件 <a class="header-anchor" href="#处理sfc-单文件组件" aria-hidden="true">#</a></h3><ol><li>下载包 npm i compiler-sfc -S</li><li>引入</li><li>通过 它模块中的parse方法进行解析，这个方法会把 模版以及js代码都返回过来</li><li>我们先处理 js</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> (url</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">indexOf</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">//说明引入的是一个 .vue结束的文件 url是一个 /xxx.vue 的格式 我们要把他转换为 xxx.vue</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">p</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">?</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)) </span><span style="color:#676E95;">//改vue文件的绝对路径</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">//加载并且使用  compilerSFC.parse 解析 这个 vue文件</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;">/* </span></span>
<span class="line"><span style="color:#676E95;">    descriptor 是一个对象，里面有编译好的模版以及js代码</span></span>
<span class="line"><span style="color:#676E95;">    */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">descriptor</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">compilerSFC</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFileSync</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">utf-8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">query</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">type</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">format</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">application/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">pathReWirte</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">descriptor</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">script</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#89DDFF;">?</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">descriptor</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">script</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">content</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">export default</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">const __script =</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C3E88D;">          import {render as ___render} from &#39;</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">?type=cc&#39;</span></span>
<span class="line"><span style="color:#C3E88D;">          __script.render = ___render</span></span>
<span class="line"><span style="color:#C3E88D;">          export default __script</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;">// 写render 函数  然后进行返回</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">template</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">descriptor</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">template</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">render</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">compilerDOM</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">compile</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">template</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">content</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> mode</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">format</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">application/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">pathReWirte</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">render</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">code</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ol start="5"><li>上面代码可以发现我们处理好js后会在下面拼接一个query参数为type的请求 去请求render函数</li><li>在else的逻辑中处理 带有type参数的情况，我们吧render函数返回出去 就可以了</li></ol><h3 id="处理css文件" tabindex="-1">处理css文件‘ <a class="header-anchor" href="#处理css文件" aria-hidden="true">#</a></h3><ol><li>返回一个js字符串</li><li>大概逻辑就是自定义一个style标签，把读取到的文件通过标签.innterHTML的方式进行加入</li><li>最后到处这个 css 字符串就可以了</li></ol><p><strong>注意</strong></p><ol><li>环境 因为vue需要使用node_evn来判断环境，所以我们会在相应html模版的时候多加入一个script标签将环境变量挂在上去</li></ol>`,20),e=[o];function r(t,c,F,y,i,D){return a(),l("div",null,e)}const C=s(p,[["render",r]]);export{d as __pageData,C as default};
